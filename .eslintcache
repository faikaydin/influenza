[{"/Users/pson0007/Documents/Practices/ez-anz/src/reportWebVitals.js":"1","/Users/pson0007/Documents/Practices/ez-anz/src/App.js":"2","/Users/pson0007/Documents/Practices/ez-anz/src/components/TableauEmbed.js":"3","/Users/pson0007/Documents/Practices/ez-anz/src/index.js":"4","/Users/pson0007/Documents/Practices/ez-anz/src/components/Navigation.js":"5","/Users/pson0007/Documents/Practices/ez-anz/src/components/Modelling.js":"6","/Users/pson0007/Documents/Practices/ez-anz/src/components/jupView/JupView.js":"7"},{"size":362,"mtime":1606545336023,"results":"8","hashOfConfig":"9"},{"size":593,"mtime":1606628711215,"results":"10","hashOfConfig":"9"},{"size":9426,"mtime":1606631525858,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":1606545336022,"results":"12","hashOfConfig":"9"},{"size":782,"mtime":1606554078416,"results":"13","hashOfConfig":"9"},{"size":5703,"mtime":1606817337945,"results":"14","hashOfConfig":"9"},{"size":19478,"mtime":1606729693699,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"deoy6w",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/pson0007/Documents/Practices/ez-anz/src/reportWebVitals.js",[],"/Users/pson0007/Documents/Practices/ez-anz/src/App.js",[],"/Users/pson0007/Documents/Practices/ez-anz/src/components/TableauEmbed.js",["32","33","34"],"/Users/pson0007/Documents/Practices/ez-anz/src/index.js",[],"/Users/pson0007/Documents/Practices/ez-anz/src/components/Navigation.js",[],"/Users/pson0007/Documents/Practices/ez-anz/src/components/Modelling.js",["35","36","37","38","39","40","41","42","43","44","45","46"],"import React from 'react'\nimport './tableauEmbed.scss'\nimport Img1 from './../assets/image 1.png'\nimport Img2 from './../assets/image 2.png'\nimport Img3 from './../assets/image 3.png'\nimport Img4 from './../assets/image 4.png'\nimport Graph1 from './../assets/graph1.png'\n\nimport Img5 from './../assets/image 5.png'\nimport Img6 from './../assets/image 6.png'\nimport Graph2 from './../assets/graph2.png'\n\nimport Img7 from './../assets/image 7.png'\nimport Graph3 from './../assets/graph3.png'\n\nimport Img8 from './../assets/image 8.png'\n\nimport JupViewer from './jupView/JupView'\n\nconst Modelling = () => {\n  return (\n    <div>\n      {/* <JupViewer file=\"https://raw.githubusercontent.com/pson0001/CaseStudy/main/src/assets/anz.ipynb\" /> */}\n      <div className=\"insightsContainer\">\n        <h1>Influenza Modeling</h1>\n        <p style={{ marginBottom: '60px' }}>View code at</p>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img1} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Curation</h3>\n            <ul>\n              <li>Modeling data starting from 2010 - 2017 (2009 anomaly)</li>\n              <li>\n                Each state has a different number of entries between 2010 - 2017\n              </li>\n              <li>\n                Getting a baseline for the series (52 x 8 ~ 416-week slots).\n              </li>\n              <li>Replacing dates with sequence order</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img2} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Curation</h3>\n            <ul>\n              <li>Interpolate missing slots for each state</li>\n              <li>\n                Aggregate signals and re-apply dates (timestamps for each month)\n              </li>\n              <li>Result in an 8 year National Influenza signal</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img3} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Decomposition of signal</h3>\n            <ul>\n              <li>Clear seasonality </li>\n              <li>Trending after 2014 ~ Could be a spike like 2009</li>\n              <li>Residuals suggest problems for short-term models</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img4} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Stationary signal</h3>\n            <img src={Graph1} alt=\"Image\" width=\"400px\" />\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img5} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Autocorrelations</h3>\n            <ul>\n              <li>ACF with ~sine wave diminishing</li>\n              <li>Strong cut off after lag one</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"descContainer\">\n            <h3>SARIMA</h3>\n            <p>Short Term</p>\n            <ul>\n              <li>\n                Seasonal ARIMA is a good fit for short term modeling this data\n              </li>\n              <li>\n                Benchmark SARIMA with original signal and SARIMA with stationary\n                signal\n              </li>\n              <li>\n                Residuals suggest that AR MA models might have difficulty\n                forecasting long term data points\n              </li>\n              <li>Benchmark with a Seasonal Random Walk</li>\n            </ul>\n          </div>\n          <div className=\"descContainer\">\n            <h3>RNN</h3>\n            <p>Long Term</p>\n            <ul>\n              <li>\n                LSTM cells will be a good fit for being aware of past signals{' '}\n              </li>\n              <li>Benchmark against short term models with rsme</li>\n              <li>Low number of parameters are ideal</li>\n              <li>\n                Step by step validation + stationary signals (will need to\n                revert back)\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img6} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Short Term Models</h3>\n            <p>Validation set</p>\n            <img src={Graph2} alt=\"Image\" width=\"500px\" />\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img7} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Long Term Model</h3>\n            <p>Validation set</p>\n            <img src={Graph3} alt=\"Image\" width=\"250px\" />\n          </div>\n        </div>\n        <div className=\"sectionContainer\">\n          <div className=\"vizContainer\">\n            <img src={Img8} alt=\"Image\" width=\"100%\" />\n          </div>\n          <div className=\"descContainer\">\n            <h3>Predictions for 6 months</h3>\n            <p>Long term models are 5x better in RSME then the best SARIMA</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Modelling\n","/Users/pson0007/Documents/Practices/ez-anz/src/components/jupView/JupView.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62"],"import React from 'react'\nimport { Card, Spin, Tag, Col, Row, Typography, Switch } from 'antd'\nimport { render } from 'react-dom'\nimport AceEditor from 'react-ace'\nimport 'ace-builds/src-noconflict/mode-python'\nimport 'ace-builds/src-noconflict/theme-monokai'\nimport 'ace-builds/src-noconflict/theme-kuroir'\nimport 'ace-builds/src-noconflict/theme-terminal'\nimport './jupview.scss'\n\nconst ReactMarkdown = require('react-markdown')\nconst { Meta } = Card\n\nclass JupViewer extends React.Component {\n  state = {\n    //file_path\n    fpath: '',\n    fbase_path: '',\n    // Editor Theme\n    ed_theme: 'lightTheme',\n    text_ed_theme: 'kuroir',\n    //themes:\n    //themes:\n    background_theme: 'white',\n    background_text_theme: 'black',\n    // background_input_theme: '#2F3129',\n    background_input_theme: '#F7F7F7',\n    background_output_theme: '#fff',\n    loading: true,\n    notebook_json: null,\n    placeholder_component: 'Loading....',\n\n    // Gutter\n    gutterVisible: false,\n  }\n\n  validURL(str) {\n    var pattern = new RegExp(\n      '^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$',\n      'i'\n    ) // fragment locator\n    return !!pattern.test(str)\n  }\n\n  async componentDidMount() {\n    if (!!this.props.file) {\n      var fbase = this.props.file.split('/')\n      fbase.pop()\n      this.setState({\n        fpath: this.props.file,\n        fbase_path: fbase.join('/') + '/',\n      })\n      await fetch(this.props.file)\n        .then((r) => r.text())\n        .then(async (text) => {\n          try {\n            var notebook_json = JSON.parse(text)\n            this.setState({\n              notebook_json: notebook_json,\n              loading: false,\n              placeholder_component: 'Notebook loaded',\n            })\n            console.log(this.state.notebook_json)\n          } catch (error) {\n            alert('OOps! Unable to load json')\n            this.setState({\n              notebook_json: { message: 'Unable to parse .ipynb file' },\n              loading: false,\n              placeholder_component:\n                'Oops! We have problem opening the notebook',\n            })\n          }\n        })\n    }\n  }\n\n  praseSource(source) {\n    var cell_content = ``\n    for (var code in source) {\n      cell_content += source[code]\n    }\n    return cell_content\n  }\n\n  parseMD(source) {\n    var cell_content = ``\n    for (var code in source) {\n      var rgx = new RegExp(/src=\"(.*?)\"/)\n      var new_source = source[code]\n      var old_source = source[code].match(rgx)\n      if (!!old_source && !this.validURL(old_source[1])) {\n        new_source = source[code].replace(\n          /src=\"(.*?)\"/,\n          'src=\"' + this.state.fbase_path + old_source[1] + '\"'\n        )\n        // console.log(new_source)\n      } else {\n        var rgx2 = new RegExp(/\\!\\[(.*?)\\]\\((.*?)[\\s|\\)]/)\n        var s2 = source[code].match(rgx2)\n        if (!!s2 && !this.validURL(s2[2])) {\n          // console.log(s2[2])\n          // console.log(this.validURL(s2[2]))\n          // console.log(new_source.replace(s2[2], this.state.fbase_path + s2[2]))\n          new_source = new_source.replace(s2[2], this.state.fbase_path + s2[2])\n        }\n      }\n      //\n      cell_content += new_source\n    }\n    return cell_content\n  }\n\n  praseOutputs(outputs) {\n    if (outputs.length == 0) {\n      return ''\n    }\n    // Handle \"data\" type cells\n    var text_plain = ``\n    var stdout = ``\n    var errors = ``\n    var img_data = `data:image/png;base64,`\n\n    //booleans\n    var stdout_found = false\n    var text_found = false\n    var error_found = false\n    var img_found = false\n\n    //maxlines for each output type\n    var lines_stdout = 3\n    var lines_text_plain = 3\n    var lines_error_trace = 3\n    for (var outs in outputs) {\n      if ('data' in outputs[outs]) {\n        if ('text/plain' in outputs[outs]['data']) {\n          for (var text in outputs[outs]['data']['text/plain']) {\n            text_plain += outputs[outs]['data']['text/plain'][text]\n          }\n          text_found = true\n          lines_text_plain = outputs[outs]['data']['text/plain'].length\n        }\n        if ('image/png' in outputs[outs]['data']) {\n          img_data += outputs[outs]['data']['image/png']\n          img_found = true\n        }\n      }\n      if ('name' in outputs[outs]) {\n        for (var text in outputs[outs]['text']) {\n          stdout += outputs[outs]['text'][text]\n        }\n        stdout_found = true\n        lines_stdout = outputs[outs]['text'].length\n      }\n      // Check for errors\n      if ('ename' in outputs[outs]) {\n        errors += outputs[outs]['ename'] + '\\n' + outputs[outs]['evalue'] + '\\n'\n        // for (var trace in outputs[outs][\"traceback\"]) {\n        //     errors += outputs[outs][\"traceback\"][trace]\n        // }\n        error_found = true\n        lines_error_trace = outputs[outs]['traceback'].length\n      }\n    }\n\n    var return_template = (\n      <div>\n        <div\n          style={{\n            padding: '5px 3px',\n            display: stdout_found ? '' : 'none',\n          }}\n        >\n          {/* <Tag color=\"#2db7f5\">stdout</Tag> */}\n          <br></br>\n          <AceEditor\n            readOnly\n            placeholder=\"--\"\n            mode=\"markdown\"\n            theme={this.state.text_ed_theme}\n            name=\"stdout\"\n            style={{\n              maxWidth: '1300px',\n              padding: '10px',\n              margin: '10px 0px',\n            }}\n            width=\"100%\"\n            maxLines={lines_stdout + 1}\n            fontSize={14}\n            showPrintMargin={false}\n            showGutter={false}\n            highlightActiveLine={false}\n            value={stdout}\n            setOptions={{\n              enableBasicAutocompletion: false,\n              enableLiveAutocompletion: false,\n              enableSnippets: false,\n              showLineNumbers: false,\n              tabSize: 2,\n            }}\n          />\n        </div>\n        <div style={{ padding: '5px 3px', display: text_found ? '' : 'none' }}>\n          {/* <Tag color=\"#87d068\">data:text/plain</Tag> */}\n          <br></br>\n          <AceEditor\n            readOnly\n            placeholder=\"--\"\n            mode=\"markdown\"\n            theme={this.state.text_ed_theme}\n            name=\"text\"\n            style={{\n              maxWidth: '1300px',\n              padding: '10px',\n              margin: '10px 0px',\n            }}\n            width=\"100%\"\n            maxLines={lines_text_plain}\n            fontSize={14}\n            showPrintMargin={false}\n            showGutter={false}\n            highlightActiveLine={false}\n            value={text_plain}\n            setOptions={{\n              enableBasicAutocompletion: false,\n              enableLiveAutocompletion: false,\n              enableSnippets: false,\n              showLineNumbers: false,\n              tabSize: 2,\n            }}\n          />\n        </div>\n        <div style={{ display: img_found ? '' : 'none' }}>\n          {/* <Tag color=\"#87d068\">data:image/png</Tag> */}\n          <br></br>\n          <img\n            src={img_data}\n            style={{\n              display: img_found ? '' : 'none',\n              width: '50%',\n              backgroundColor: 'white',\n            }}\n          />\n        </div>\n        <div style={{ padding: '5px 3px', display: error_found ? '' : 'none' }}>\n          {/* <Tag color=\"#f50\">error</Tag> */}\n          <br></br>\n          <AceEditor\n            readOnly\n            placeholder=\"--\"\n            mode=\"markdown\"\n            theme={this.state.text_ed_theme}\n            name=\"error\"\n            style={{\n              maxWidth: '1300px',\n              padding: '10px',\n              margin: '10px 0px',\n            }}\n            width=\"100%\"\n            maxLines={lines_error_trace}\n            fontSize={14}\n            showPrintMargin={false}\n            showGutter={false}\n            highlightActiveLine={false}\n            value={errors}\n            setOptions={{\n              enableBasicAutocompletion: false,\n              enableLiveAutocompletion: false,\n              enableSnippets: false,\n              showLineNumbers: false,\n              tabSize: 2,\n            }}\n          />\n        </div>\n      </div>\n    )\n\n    return return_template\n  }\n\n  themeChanger(ev) {\n    if (ev) {\n      this.setState({\n        // Editor Theme\n        ed_theme: 'lightTheme',\n        text_ed_theme: 'kuroir',\n        //themes:\n        background_theme: 'white',\n        background_text_theme: 'black',\n        // background_input_theme: '#2F3129',\n        background_input_theme: '#F7F7F7',\n        background_output_theme: '#F7F7F7',\n      })\n    } else {\n      this.setState({\n        // Editor Theme\n        ed_theme: 'lightTheme',\n        text_ed_theme: 'kuroir',\n        //themes:\n        background_theme: 'white',\n        background_text_theme: 'black',\n        // background_input_theme: '#2F3129',\n        background_input_theme: '#F7F7F7',\n        background_output_theme: '#F7F7F7',\n      })\n    }\n    console.log(`switch to ${ev}`)\n  }\n\n  gutterChanger(ev) {\n    if (ev) {\n      this.setState({\n        gutterVisible: true,\n      })\n    } else {\n      this.setState({\n        gutterVisible: false,\n      })\n    }\n  }\n\n  render() {\n    //   console.log(this.props.file)\n    return (\n      <div>\n        <br></br>\n        <Spin spinning={this.state.loading}>\n          <center>\n            {/* This is where the blog metadata and the cover will go */}\n            <div class={this.state.ed_theme}>\n              <Card\n                bodyStyle={{\n                  padding: '30px 10px',\n                  backgroundColor: this.state.background_output_theme,\n                }}\n                style={{\n                  width: '100%',\n                  maxWidth: '1400px',\n                  border: 'none',\n                }}\n              >\n                <Row>\n                  <Col span={1}></Col>\n                  <Col span={22}>\n                    <Typography.Title\n                      strong\n                      style={{\n                        color: this.state.background_text_theme,\n                        // fontSize: '50px',\n                        wordWrap: 'break-word',\n                        width: '100%',\n                      }}\n                    >\n                      {this.props.title}\n                    </Typography.Title>\n                    <Typography.Title\n                      level={4}\n                      style={{\n                        color: this.state.background_text_theme,\n                        wordWrap: 'break-word',\n                        width: '100%',\n                        display: !!this.props.subtitle ? '' : 'none',\n                      }}\n                    >\n                      {this.props.subtitle}\n                    </Typography.Title>\n                  </Col>\n                  <Col span={1}></Col>\n                </Row>\n\n                <Row>\n                  <Col span={1}></Col>\n                  <Col span={22}>\n                    <img\n                      alt=\"No Cover Image Found\"\n                      style={{\n                        display: !!this.props.coverImg ? '' : 'none',\n                        width: '100%',\n                      }}\n                      src={\n                        !!this.props.coverImg\n                          ? this.props.coverImg\n                          : 'http://eskipaper.com/images/simple-silver-wallpaper-1.jpg'\n                      }\n                    />\n                  </Col>\n                  <Col span={1}></Col>\n                </Row>\n\n                <br></br>\n                <br></br>\n                <Row>\n                  <Col span={1}></Col>\n                  <Col span={20}>\n                    <Tag color=\"blue\" style={{ float: 'left' }}>\n                      {this.state.loading\n                        ? 'Unknown'\n                        : this.state.notebook_json['metadata']['kernelspec'][\n                            'display_name'\n                          ]}\n                    </Tag>\n                    {/* <Switch\n                      style={{\n                        margin: '0px 5px',\n                      }}\n                      defaultChecked\n                      checkedChildren=\"light theme\"\n                      unCheckedChildren=\"dark theme\"\n                      onChange={this.themeChanger.bind(this)}\n                    />\n                    <Switch\n                      style={{\n                        margin: '0px 5px',\n                      }}\n                      checkedChildren=\"gutter visilbe\"\n                      unCheckedChildren=\"gutter hidden\"\n                      onChange={this.gutterChanger.bind(this)}\n                    /> */}\n                  </Col>\n                  <Col span={1}></Col>\n                </Row>\n              </Card>\n            </div>\n            {this.state.loading ? (\n              <div></div>\n            ) : (\n              this.state.notebook_json['cells'].map((item) => (\n                <Card\n                  bodyStyle={{\n                    padding: '0px 10px',\n                    backgroundColor: this.state.background_output_theme,\n                  }}\n                  style={{\n                    width: '100%',\n                    maxWidth: '1400px',\n                    border: 'none',\n                  }}\n                >\n                  <Row\n                    style={{\n                      backgroundColor: this.state.background_output_theme,\n                    }}\n                  >\n                    <Col span={this.state.gutterVisible ? 3 : 1}>\n                      <div\n                        style={{\n                          display: this.state.gutterVisible ? '' : 'none',\n                        }}\n                      >\n                        <Typography.Text\n                          style={{\n                            color: this.state.background_text_theme,\n                            float: 'left',\n                            padding: '5px',\n                            color: '#56ACBC',\n                            display: item['cell_type'] == 'code' ? '' : 'none',\n                            backgroundColor: 'transparent',\n                          }}\n                        >\n                          I [ {item['execution_count']} ]:\n                        </Typography.Text>\n                      </div>\n                    </Col>\n\n                    <Col\n                      span={this.state.gutterVisible ? 20 : 22}\n                      style={{\n                        textAlign: 'left',\n                      }}\n                    >\n                      {item['cell_type'] == 'code' ? (\n                        <div\n                          style={{\n                            padding: '5px 0px',\n                            borderStyle: 'solid',\n                            borderWidth: '1px',\n                            backgroundColor: this.state.background_input_theme,\n                          }}\n                        >\n                          <AceEditor\n                            readOnly\n                            placeholder=\"---\"\n                            mode=\"python\"\n                            theme={this.state.text_ed_theme}\n                            name=\"code\"\n                            style={{\n                              maxWidth: '1300px',\n                              padding: '10px',\n                              margin: '10px 0px',\n                              backgroundColor: 'transparent',\n                            }}\n                            width=\"100%\"\n                            maxLines={\n                              item['source'].length == 0\n                                ? 1\n                                : item['source'].length + 1\n                            }\n                            onLoad={this.onLoad}\n                            onChange={this.onChange}\n                            fontSize={14}\n                            showGutter={true}\n                            highlightActiveLine={true}\n                            value={this.praseSource(item['source'])}\n                            setOptions={{\n                              enableBasicAutocompletion: false,\n                              enableLiveAutocompletion: false,\n                              enableSnippets: false,\n                              showLineNumbers: true,\n                              tabSize: 2,\n                            }}\n                          />\n                        </div>\n                      ) : (\n                        <div class=\"MDImg\">\n                          <div\n                            class={this.state.ed_theme}\n                            style={{\n                              margin: '0px 0px',\n                              padding: '10px',\n                              width: '100%',\n                              // border:'solid',\n                              // borderWidth:'1px'\n                            }}\n                          >\n                            <ReactMarkdown\n                              style={{\n                                float: 'left',\n                              }}\n                              source={this.parseMD(item['source'])}\n                              escapeHtml={false}\n                            />\n                          </div>\n                        </div>\n                      )}\n                    </Col>\n                    <Col span={1}></Col>\n                  </Row>\n\n                  {item['cell_type'] == 'markdown' ? (\n                    <div></div>\n                  ) : (\n                    <Row\n                      style={{\n                        display:\n                          !!item['outputs'].length == 0 ? 'none' : 'visible',\n                        backgroundColor: this.state.background_output_theme,\n                      }}\n                    >\n                      <Col span={this.state.gutterVisible ? 3 : 1}>\n                        <Typography.Text\n                          style={{\n                            display: this.state.gutterVisible ? '' : 'none',\n                            color: this.state.background_text_theme,\n                            float: 'left',\n                            padding: '5px',\n                            color: '#E5496A',\n                            backgroundColor: 'transparent',\n                          }}\n                        >\n                          O [ {item['execution_count']} ]:\n                        </Typography.Text>\n                      </Col>\n                      <Col\n                        span={this.state.gutterVisible ? 20 : 22}\n                        style={{\n                          textAlign: 'left',\n                          color: 'white',\n                          backgroundColor: 'transparent',\n                        }}\n                      >\n                        {this.praseOutputs(item['outputs'])}\n                      </Col>\n                      <Col span={1}></Col>\n                    </Row>\n                  )}\n                </Card>\n              ))\n            )}\n          </center>\n        </Spin>\n        <br></br>\n      </div>\n    )\n  }\n}\n\nexport default JupViewer\n",{"ruleId":"63","severity":1,"message":"64","line":71,"column":6,"nodeType":"65","endLine":71,"endColumn":8,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":276,"column":17,"nodeType":"69","endLine":276,"endColumn":57},{"ruleId":"67","severity":1,"message":"68","line":298,"column":17,"nodeType":"69","endLine":298,"endColumn":81},{"ruleId":"70","severity":1,"message":"71","line":18,"column":8,"nodeType":"72","messageId":"73","endLine":18,"endColumn":17},{"ruleId":"67","severity":1,"message":"68","line":29,"column":13,"nodeType":"69","endLine":29,"endColumn":56},{"ruleId":"67","severity":1,"message":"68","line":47,"column":13,"nodeType":"69","endLine":47,"endColumn":56},{"ruleId":"67","severity":1,"message":"68","line":62,"column":13,"nodeType":"69","endLine":62,"endColumn":56},{"ruleId":"67","severity":1,"message":"68","line":75,"column":13,"nodeType":"69","endLine":75,"endColumn":56},{"ruleId":"67","severity":1,"message":"68","line":79,"column":13,"nodeType":"69","endLine":79,"endColumn":59},{"ruleId":"67","severity":1,"message":"68","line":84,"column":13,"nodeType":"69","endLine":84,"endColumn":56},{"ruleId":"67","severity":1,"message":"68","line":131,"column":13,"nodeType":"69","endLine":131,"endColumn":56},{"ruleId":"67","severity":1,"message":"68","line":136,"column":13,"nodeType":"69","endLine":136,"endColumn":59},{"ruleId":"67","severity":1,"message":"68","line":141,"column":13,"nodeType":"69","endLine":141,"endColumn":56},{"ruleId":"67","severity":1,"message":"68","line":146,"column":13,"nodeType":"69","endLine":146,"endColumn":59},{"ruleId":"67","severity":1,"message":"68","line":151,"column":13,"nodeType":"69","endLine":151,"endColumn":56},{"ruleId":"70","severity":1,"message":"74","line":2,"column":49,"nodeType":"72","messageId":"73","endLine":2,"endColumn":55},{"ruleId":"70","severity":1,"message":"75","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":16},{"ruleId":"70","severity":1,"message":"76","line":12,"column":9,"nodeType":"72","messageId":"73","endLine":12,"endColumn":13},{"ruleId":"77","severity":1,"message":"78","line":103,"column":32,"nodeType":"79","messageId":"80","endLine":103,"endColumn":33,"suggestions":"81"},{"ruleId":"77","severity":1,"message":"82","line":103,"column":54,"nodeType":"79","messageId":"80","endLine":103,"endColumn":55,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":119,"column":24,"nodeType":"86","messageId":"87","endLine":119,"endColumn":26},{"ruleId":"88","severity":1,"message":"89","line":153,"column":18,"nodeType":"72","messageId":"90","endLine":153,"endColumn":22},{"ruleId":"91","severity":1,"message":"92","line":240,"column":11,"nodeType":"69","endLine":247,"endColumn":13},{"ruleId":"67","severity":1,"message":"68","line":378,"column":21,"nodeType":"69","endLine":389,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":459,"column":29,"nodeType":"95","messageId":"87","endLine":459,"endColumn":34},{"ruleId":"84","severity":1,"message":"85","line":460,"column":56,"nodeType":"86","messageId":"87","endLine":460,"endColumn":58},{"ruleId":"84","severity":1,"message":"85","line":475,"column":42,"nodeType":"86","messageId":"87","endLine":475,"endColumn":44},{"ruleId":"84","severity":1,"message":"85","line":498,"column":53,"nodeType":"86","messageId":"87","endLine":498,"endColumn":55},{"ruleId":"84","severity":1,"message":"85","line":543,"column":38,"nodeType":"86","messageId":"87","endLine":543,"endColumn":40},{"ruleId":"84","severity":1,"message":"85","line":549,"column":52,"nodeType":"86","messageId":"87","endLine":549,"endColumn":54},{"ruleId":"93","severity":1,"message":"94","line":560,"column":29,"nodeType":"95","messageId":"87","endLine":560,"endColumn":34},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initViz', 'initVizAgeYear', 'initVizFLuYear', 'initVizIndigenous', 'initVizSexYear', 'initVizStateYear', and 'initVizTimeSeries'. Either include them or remove the dependency array.","ArrayExpression",["96"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'JupViewer' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'render' is defined but never used.","'Meta' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\!.","Literal","unnecessaryEscape",["97","98"],"Unnecessary escape character: \\).",["99","100"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'text' is already defined.","redeclared","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression",{"desc":"101","fix":"102"},{"messageId":"103","fix":"104","desc":"105"},{"messageId":"106","fix":"107","desc":"108"},{"messageId":"103","fix":"109","desc":"105"},{"messageId":"106","fix":"110","desc":"108"},"Update the dependencies array to be: [initViz, initVizAgeYear, initVizFLuYear, initVizIndigenous, initVizSexYear, initVizStateYear, initVizTimeSeries]",{"range":"111","text":"112"},"removeEscape",{"range":"113","text":"114"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"115","text":"116"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"117","text":"114"},{"range":"118","text":"116"},[2066,2068],"[initViz, initVizAgeYear, initVizFLuYear, initVizIndigenous, initVizSexYear, initVizStateYear, initVizTimeSeries]",[3026,3027],"",[3026,3026],"\\",[3048,3049],[3048,3048]]